package comSIWeb.Operaciones;
// Generated 14/02/2010 11:10:21 AM by Hibernate Tools 3.2.1.GA

import comSIWeb.ContextoApt.CIP_Permiso;
import comSIWeb.ContextoApt.VariableSession;
import comSIWeb.Utilerias.UtilXml;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Iterator;
import java.util.TreeSet;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Formularios generated by hbm2java
 */
public class Formularios extends TableMaster {

   private VariableSession varSesiones;
   private String[] lstFieldsNoScreen;
   protected boolean bolValidaSeguridad;
   private static final Logger log = LogManager.getLogger(Formularios.class.getName());
   
   public Formularios() {
      super("formularios", "frm_id", "", "");
      this.Fields.put("frm_id", new Integer(0));
      this.Fields.put("frm_title", "");
      this.Fields.put("frm_idTitle", new Integer(0));
      this.Fields.put("frm_abrv", "");
      this.Fields.put("frm_script", "");
      this.Fields.put("frm_javascript", "");
      this.Fields.put("frm_table", "");
      this.Fields.put("frm_table1", "");
      this.Fields.put("frm_key", "");
      this.Fields.put("frm_titleButton", "");
      this.Fields.put("frm_scriptCancel", "");
      this.Fields.put("frm_urlgrid", "");
      this.Fields.put("frm_orden", "");
      this.Fields.put("frm_urlNew", "");
      this.Fields.put("frm_urlEd", "");
      this.Fields.put("frm_urlDel", "");
      this.Fields.put("frm_urlData", "");
      this.Fields.put("frm_xmlNodoIni", "");
      this.Fields.put("frm_xmlNodoSec", "");
      this.Fields.put("frm_SeImprime", new Integer(0));
      this.Fields.put("frm_urlDataPrint", "");
      this.Fields.put("frm_usaAjax", new Integer(0));
      this.Fields.put("frm_nomtabla", "");
      this.Fields.put("frm_tituloNuevo", "");
      this.Fields.put("frm_recupera_auto_increment", new Integer(0));
      this.Fields.put("frm_PrintExt", new Integer(0));
      this.Fields.put("frm_tipoorden", "");
      this.Fields.put("frm_validaAnul", new Integer(0));
      this.Fields.put("frm_campoAnul", "");
      this.Fields.put("frm_scriptBeginAlta", "");
      this.Fields.put("frm_scriptBeginModi", "");
      this.Fields.put("frm_esreporte", new Integer(0));
      this.Fields.put("frm_scriptOpenDialog", "");
      this.Fields.put("frm_scriptCloseDialog", "");
      this.Fields.put("frm_scriptdblClickGrid", "");
      this.Fields.put("frm_enctype", new Integer(0));
      this.Fields.put("frm_target", "");
      this.Fields.put("frm_ordendefa", "");
      this.Fields.put("frm_numaccesos", new Integer(0));
      this.Fields.put("frm_msgalta", new Integer(0));
      this.Fields.put("frm_msgnvo", new Integer(0));
      this.Fields.put("frm_gridscroll", new Integer(0));
      this.Fields.put("frm_ongridafterInsertRow", "");
      this.Fields.put("frm_ongridComplete", "");
      this.Fields.put("frm_ongridloadError", "");
      this.Fields.put("frm_ongridRightClickRow", "");
      this.Fields.put("frm_ongridSelectAll", "");
      this.Fields.put("frm_ongridSortCol", "");
      this.Fields.put("frm_ongridSelRow", "");
      this.Fields.put("frm_numtabs", new Integer(0));
      this.Fields.put("frm_onTabClick", "");
      this.Fields.put("frm_onTabHide", "");
      this.Fields.put("frm_onTabShow", "");
      this.Fields.put("frm_gridEdit", new Integer(0));
      this.Fields.put("frm_libscript", "");
      this.Fields.put("frm_scriptEndAlta", "");
      this.Fields.put("frm_scriptEndModi", "");
      this.Fields.put("frm_backAddtome", new Integer(0));
      this.Fields.put("frm_gridrows", new Integer(0));
      this.Fields.put("frm_focusauto", new Integer(0));
      this.Fields.put("frm_searchtype", new Integer(0));
      this.Fields.put("frm_multikey", new Integer(0));
      this.Fields.put("frm_gridCondicion", "");
      this.Fields.put("frm_scriptBeforeMod", "");
      this.Fields.put("frm_scriptAfterMod", "");
      this.Fields.put("frm_scriptBeforeAdd", "");
      this.Fields.put("frm_scriptAfterAdd", "");
      this.Fields.put("frm_scriptBeforeDel", "");
      this.Fields.put("frm_grid_width", new Integer(0));
      this.Fields.put("frm_grid_height", new Integer(0));
      this.Fields.put("frm_pop_ups", new Integer(0));
      this.Fields.put("frm_grid_sub_querys", "");
      this.Fields.put("frm_script_before_import", "");
      this.Fields.put("frm_script_after_import", "");
      this.Fields.put("frm_url_import", "");
      this.Fields.put("frm_idImport", 0);
      this.Fields.put("frm_tiene_ayuda_rapida", 0);
      this.bolValidaSeguridad = true;
      //Lista de campos que no se envian para generar formularios
      this.lstFieldsNoScreen = new String[16];
      this.lstFieldsNoScreen[0] = "frm_scriptBeforeMod";
      this.lstFieldsNoScreen[1] = "frm_scriptAfterMod";
      this.lstFieldsNoScreen[2] = "frm_scriptBeforeAdd";
      this.lstFieldsNoScreen[3] = "frm_scriptAfterAdd";
      this.lstFieldsNoScreen[4] = "frm_scriptBeforeDel";
      this.lstFieldsNoScreen[5] = "frm_gridCondicion";
      this.lstFieldsNoScreen[6] = "frm_table";
      this.lstFieldsNoScreen[7] = "frm_table1";
      this.lstFieldsNoScreen[8] = "frm_SeImprime";
      this.lstFieldsNoScreen[9] = "frm_idTitle";
      this.lstFieldsNoScreen[10] = "frm_nomtabla";
      this.lstFieldsNoScreen[11] = "frm_numaccesos";
      this.lstFieldsNoScreen[12] = "frm_recupera_auto_increment";
      this.lstFieldsNoScreen[13] = "frm_grid_sub_querys";
      this.lstFieldsNoScreen[14] = "frm_script_before_import";
      this.lstFieldsNoScreen[15] = "frm_script_after_import";
   }

   /**
    * Carga los datos de un registro en particular
    * @param strOpt Es la llave del formulario
    * @param oConn Es la conexion a la base de datos
    * @return Nos regresa Ok en caso de que todo sea exitoso
    */
   public String ObtenDatos(String strOpt, Conexion oConn) {
      String strRes = "OK";
      String strSql = "select * from " + this.NomTabla + " where frm_abrv = '" + strOpt + "'";
      //Id de los permisos
      int intIdPermisoAdd = 0;
      int intIdPermisoMod = 0;
      int intIdPermisoDel = 0;
      int intIdPermisoPrint = 0;
      int intIdPermisoImport = 0;
      try {
         ResultSet rs = oConn.runQuery(strSql, true);
         ResultSetMetaData rsmd = rs.getMetaData();
         int numberOfColumns = rsmd.getColumnCount();
         while (rs.next()) {
            intIdPermisoAdd = rs.getInt("frm_idPAdd");
            intIdPermisoMod = rs.getInt("frm_idPMod");
            intIdPermisoDel = rs.getInt("frm_idPDel");
            intIdPermisoPrint = rs.getInt("frm_idPrint");
            intIdPermisoImport = rs.getInt("frm_idImport");
            /*Recorremos el hash Map con los campos*/
            TreeSet keys = new TreeSet(this.Fields.keySet());
            Iterator it = keys.iterator();
            while (it.hasNext()) {
               String strNomField = (String) it.next();
               boolean bolEncontro = false;
               for (int i = 1; i <= numberOfColumns; i++) {
                  if (rsmd.getColumnName(i).equals(strNomField)) {
                     /*System.out.println("strNomField " + strNomField + " getColumnName " + rsmd.getColumnName(i));
                     System.out.println(rsmd.getColumnTypeName(i) + " " + rsmd.getColumnTypeName(i).substring(0, 3));*/
                     if (rsmd.getColumnTypeName(i).toUpperCase().startsWith("VARCHAR")) {
                        String strValue = rs.getString(strNomField);
                        this.Fields.put(strNomField, strValue);
                     } else {
                        if (rsmd.getColumnTypeName(i).toUpperCase().startsWith("INT")) {
                           int intValue = rs.getInt(strNomField);
                           this.Fields.put(strNomField, intValue);
                        } else {
                           if (rsmd.getColumnTypeName(i).toUpperCase().startsWith("DECIMAL")) {
                              double dblValue = rs.getDouble(strNomField);
                              this.Fields.put(strNomField, dblValue);
                           } else {
                              if (rsmd.getColumnTypeName(i).toUpperCase().startsWith("DOUBLE")) {
                                 double dblValue = rs.getDouble(strNomField);
                                 this.Fields.put(strNomField, dblValue);
                              } else {
                                 if (rsmd.getColumnTypeName(i).toUpperCase().startsWith("SMALLINT")) {
                                    short intValue = rs.getShort(strNomField);
                                    this.Fields.put(strNomField, intValue);
                                 } else {
                                    if (rsmd.getColumnTypeName(i).toUpperCase().startsWith("CLOB")) {
                                       String strValue = rs.getString(strNomField);
                                       this.Fields.put(strNomField, strValue);
                                    } else {
                                       if (rsmd.getColumnTypeName(i).toUpperCase().startsWith("TEXT")) {
                                          String strValue = rs.getString(strNomField);
                                          this.Fields.put(strNomField, strValue);
                                       } else {
                                          String strValue = rs.getString(strNomField);
                                          this.Fields.put(strNomField, strValue);
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                     bolEncontro = true;
                  }
               }
               if (!bolEncontro) {
                  System.out.println("No encontro " + strNomField);
               }
            }

         }
      } catch (SQLException ex) {
         strRes = "ERROR:" + oConn.getStrMsgError();
         bitacora.GeneraBitacora(oConn.getStrMsgError(), oConn.getStrUsuario(), "", oConn);
      }
      /*Validamos la seguridad*/
      if (this.bolValidaSeguridad) {
         if (intIdPermisoAdd != 0
                 || intIdPermisoMod != 0
                 || intIdPermisoDel != 0
                 || intIdPermisoImport != 0
                 || intIdPermisoPrint != 0) {
            //Validamos la opcion de agregar
            if (intIdPermisoAdd != 0 && !CIP_Permiso.ValidaPermiso(intIdPermisoAdd, this.varSesiones.getIntIdPerfil(), oConn)) {
               this.Fields.put("frm_urlNew", "");
            }
            //Validamos la opcion de modificar
            if (intIdPermisoMod != 0 && !CIP_Permiso.ValidaPermiso(intIdPermisoMod, this.varSesiones.getIntIdPerfil(), oConn)) {
               this.Fields.put("frm_urlEd", "");
            }
            //Validamos la opcion de borrar
            if (intIdPermisoDel != 0 && !CIP_Permiso.ValidaPermiso(intIdPermisoDel, this.varSesiones.getIntIdPerfil(), oConn)) {
               this.Fields.put("frm_urlDel", "");
            }
            //Validamos la opcion de imprimir
            if (intIdPermisoPrint != 0 && !CIP_Permiso.ValidaPermiso(intIdPermisoPrint, this.varSesiones.getIntIdPerfil(), oConn)) {
               this.Fields.put("frm_urlDataPrint", "");
            }
            //Validamos la opcion de importar
            if (intIdPermisoImport != 0 && !CIP_Permiso.ValidaPermiso(intIdPermisoImport, this.varSesiones.getIntIdPerfil(), oConn)) {
               this.Fields.put("frm_url_import", "");
            }
         }
      }
      return strRes;
   }

   /**
    * Nos regresa las variables de sesion
    * @return es el objeto variables de sesion
    */
   public VariableSession getVarSesiones() {
      return varSesiones;
   }

   /**
    * Define las variables de sesion
    * @param varSesiones es el objeto variables de sesion
    */
   public void setVarSesiones(VariableSession varSesiones) {
      this.varSesiones = varSesiones;
   }

   /**
    * Nos regresa una cadena con el par nombre de campo = "Valor campo"
    * @return Regresa una cadena
    */
   @Override
   public String getFieldPar() {
      UtilXml utilXML = new UtilXml();
      String strRes = "";
      /*Recorremos el hash Map con los campos*/
      TreeSet keys = new TreeSet(this.Fields.keySet());
      Iterator it = keys.iterator();
      while (it.hasNext()) {
         String strNomField = (String) it.next();
         boolean bolAplica = true;
         //Validamos si el campo aplica para mostrarlo en el generador de formularios
         for (int j = 0; j < this.lstFieldsNoScreen.length; j++) {
            if (this.lstFieldsNoScreen[j].equals(strNomField)) {
               bolAplica = false;
            }
         }
         if (bolAplica) {
            String strValor = String.valueOf(this.Fields.get(strNomField));
            strValor = strValor.replace("&&", "##");
            strRes += strNomField + " = \"" + utilXML.Sustituye(strValor) + "\" ";
         }
      }
      return strRes;
   }

   /**
    * Nos dice si validamos la seguridad
    * @return Regresa un valor boolean
    */
   public boolean isBolValidaSeguridad() {
      return bolValidaSeguridad;
   }

   /**
    * Define si validamos la segurdiad
    * @param bolValidaSeguridad Es un valor boolean
    */
   public void setBolValidaSeguridad(boolean bolValidaSeguridad) {
      this.bolValidaSeguridad = bolValidaSeguridad;
   }
}
